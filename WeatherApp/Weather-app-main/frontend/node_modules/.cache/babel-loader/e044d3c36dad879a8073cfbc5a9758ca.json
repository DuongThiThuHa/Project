{"ast":null,"code":"import axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\n\nconst refreshToken = async () => {\n  try {\n    const res = await axios.post(\"/v1/auth/refresh\", {\n      withCredentials: true\n    });\n    return res.data;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const createAxios = (user, dispatch, stateSuccess) => {\n  const newInstance = axios.create();\n  newInstance.interceptors.request.use(async config => {\n    let date = new Date();\n    const decodedToken = jwt_decode(user === null || user === void 0 ? void 0 : user.accessToken);\n\n    if (decodedToken.exp < date.getTime() / 1000) {\n      const data = await refreshToken();\n      const refreshUser = { ...user,\n        accessToken: data.accessToken\n      };\n      dispatch(stateSuccess(refreshUser));\n      config.headers[\"token\"] = \"Bearer \" + data.accessToken;\n    }\n\n    return config;\n  }, err => {\n    return Promise.reject(err);\n  });\n  return newInstance;\n};","map":{"version":3,"sources":["D:/csdlNangcao/Web_app/frontend/src/createInstance.js"],"names":["axios","jwt_decode","refreshToken","res","post","withCredentials","data","err","console","log","createAxios","user","dispatch","stateSuccess","newInstance","create","interceptors","request","use","config","date","Date","decodedToken","accessToken","exp","getTime","refreshUser","headers","Promise","reject"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;;AAEA,MAAMC,YAAY,GAAG,YAAY;AAC/B,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMH,KAAK,CAACI,IAAN,CAAW,kBAAX,EAA+B;AAC/CC,MAAAA,eAAe,EAAE;AAD8B,KAA/B,CAAlB;AAGA,WAAOF,GAAG,CAACG,IAAX;AACD,GALD,CAKE,OAAOC,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,CATD;;AAWA,OAAO,MAAMG,WAAW,GAAG,CAACC,IAAD,EAAOC,QAAP,EAAiBC,YAAjB,KAAkC;AAC3D,QAAMC,WAAW,GAAGd,KAAK,CAACe,MAAN,EAApB;AACAD,EAAAA,WAAW,CAACE,YAAZ,CAAyBC,OAAzB,CAAiCC,GAAjC,CACE,MAAOC,MAAP,IAAkB;AAChB,QAAIC,IAAI,GAAG,IAAIC,IAAJ,EAAX;AACA,UAAMC,YAAY,GAAGrB,UAAU,CAACU,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEY,WAAP,CAA/B;;AACA,QAAID,YAAY,CAACE,GAAb,GAAmBJ,IAAI,CAACK,OAAL,KAAiB,IAAxC,EAA8C;AAC5C,YAAMnB,IAAI,GAAG,MAAMJ,YAAY,EAA/B;AACA,YAAMwB,WAAW,GAAG,EAClB,GAAGf,IADe;AAElBY,QAAAA,WAAW,EAAEjB,IAAI,CAACiB;AAFA,OAApB;AAIAX,MAAAA,QAAQ,CAACC,YAAY,CAACa,WAAD,CAAb,CAAR;AACAP,MAAAA,MAAM,CAACQ,OAAP,CAAe,OAAf,IAA0B,YAAYrB,IAAI,CAACiB,WAA3C;AACD;;AACD,WAAOJ,MAAP;AACD,GAdH,EAeGZ,GAAD,IAAS;AACP,WAAOqB,OAAO,CAACC,MAAR,CAAetB,GAAf,CAAP;AACD,GAjBH;AAmBA,SAAOO,WAAP;AACD,CAtBM","sourcesContent":["import axios from \"axios\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\nconst refreshToken = async () => {\r\n  try {\r\n    const res = await axios.post(\"/v1/auth/refresh\", {\r\n      withCredentials: true,\r\n    });\r\n    return res.data;\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nexport const createAxios = (user, dispatch, stateSuccess) => {\r\n  const newInstance = axios.create();\r\n  newInstance.interceptors.request.use(\r\n    async (config) => {\r\n      let date = new Date();\r\n      const decodedToken = jwt_decode(user?.accessToken);\r\n      if (decodedToken.exp < date.getTime() / 1000) {\r\n        const data = await refreshToken();\r\n        const refreshUser = {\r\n          ...user,\r\n          accessToken: data.accessToken,\r\n        };\r\n        dispatch(stateSuccess(refreshUser));\r\n        config.headers[\"token\"] = \"Bearer \" + data.accessToken;\r\n      }\r\n      return config;\r\n    },\r\n    (err) => {\r\n      return Promise.reject(err);\r\n    }\r\n  );\r\n  return newInstance;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}