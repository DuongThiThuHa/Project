{"ast":null,"code":"var _jsxFileName = \"D:\\\\csdlNangcao\\\\Web_app\\\\frontend\\\\src\\\\Components\\\\Home\\\\HomePage.jsx\",\n    _s = $RefreshSig$();\n\nimport \"./home.css\";\nimport TopButtons from \"../TopButtons\";\nimport Inputs from \"../Inputs\";\nimport TimeAndLocation from \"../TimeAndLocation\";\nimport TemperatureAndDetails from \"../TemperatureAndDetails\";\nimport Forecast from \"../Forecast\";\nimport getFormattedWeatherData from \"../services/weatherService\";\nimport { useEffect, useState } from \"react\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction HomePage() {\n  _s();\n\n  const [query, setQuery] = useState({\n    q: \"Hanoi\"\n  });\n  const [units, setUnits] = useState(\"metric\");\n  const [weather, setWeather] = useState(null);\n  useEffect(() => {\n    const fetchWeather = async () => {\n      const message = query.q ? query.q : \"current location.\";\n      toast.info(\"Fetching weather for \" + message);\n      await getFormattedWeatherData({ ...query,\n        units\n      }).then(data => {\n        toast.success(`Successfully fetched weather for ${data.name}, ${data.country}.`);\n        setWeather(data);\n      });\n    };\n\n    fetchWeather();\n  }, [query, units]);\n\n  const formatBackground = () => {\n    if (!weather) return \"from-cyan-700 to-blue-700\";\n    const threshold = units === \"metric\" ? 20 : 60;\n    if (weather.temp <= threshold) return \"from-cyan-700 to-blue-700\";\n    return \"from-yellow-700 to-orange-700\";\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `mx-auto max-w-screen-md mt-4 py-5 px-32 bg-gradient-to-br  h-fit shadow-xl shadow-gray-400 ${formatBackground()}`,\n    children: [/*#__PURE__*/_jsxDEV(TopButtons, {\n      setQuery: setQuery\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Inputs, {\n      setQuery: setQuery,\n      units: units,\n      setUnits: setUnits\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), weather && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(TimeAndLocation, {\n        weather: weather\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TemperatureAndDetails, {\n        weather: weather\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Forecast, {\n        title: \"hourly forecast\",\n        items: weather.hourly\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Forecast, {\n        title: \"daily forecast\",\n        items: weather.daily\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this), \";\", /*#__PURE__*/_jsxDEV(ToastContainer, {\n      autoClose: 5000,\n      theme: \"colored\",\n      newestOnTop: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(HomePage, \"KEC4VACtyGcJZhRjT9aCkgeL5Xs=\");\n\n_c = HomePage;\nexport default HomePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"sources":["D:/csdlNangcao/Web_app/frontend/src/Components/Home/HomePage.jsx"],"names":["TopButtons","Inputs","TimeAndLocation","TemperatureAndDetails","Forecast","getFormattedWeatherData","useEffect","useState","ToastContainer","toast","HomePage","query","setQuery","q","units","setUnits","weather","setWeather","fetchWeather","message","info","then","data","success","name","country","formatBackground","threshold","temp","hourly","daily"],"mappings":"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","sourcesContent":["\nimport \"./home.css\";\nimport TopButtons from \"../TopButtons\";\nimport Inputs from \"../Inputs\";\nimport TimeAndLocation from \"../TimeAndLocation\";\nimport TemperatureAndDetails from \"../TemperatureAndDetails\";\nimport Forecast from \"../Forecast\";\nimport getFormattedWeatherData from \"../services/weatherService\";\nimport { useEffect, useState } from \"react\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\n\nfunction HomePage() {\n  const [query, setQuery] = useState({ q: \"Hanoi\" });\n  const [units, setUnits] = useState(\"metric\");\n  const [weather, setWeather] = useState(null);\n\n  useEffect(() => {\n    const fetchWeather = async () => {\n      const message = query.q ? query.q : \"current location.\";\n\n      toast.info(\"Fetching weather for \" + message);\n\n      await getFormattedWeatherData({ ...query, units }).then((data) => {\n        toast.success(\n          `Successfully fetched weather for ${data.name}, ${data.country}.`\n        );\n\n        setWeather(data);\n      });\n    };\n\n    fetchWeather();\n  }, [query, units]);\n\n  const formatBackground = () => {\n    if (!weather) return \"from-cyan-700 to-blue-700\";\n    const threshold = units === \"metric\" ? 20 : 60;\n    if (weather.temp <= threshold) return \"from-cyan-700 to-blue-700\";\n\n    return \"from-yellow-700 to-orange-700\";\n  };\n\n  return (\n    <div\n      className={`mx-auto max-w-screen-md mt-4 py-5 px-32 bg-gradient-to-br  h-fit shadow-xl shadow-gray-400 ${formatBackground()}`}\n    >\n      <TopButtons setQuery={setQuery} />\n      <Inputs setQuery={setQuery} units={units} setUnits={setUnits} />\n\n      {weather && (\n        <div>\n          <TimeAndLocation weather={weather} />\n          <TemperatureAndDetails weather={weather} />\n\n          <Forecast title=\"hourly forecast\" items={weather.hourly} />\n          <Forecast title=\"daily forecast\" items={weather.daily} />\n        </div>\n      )};\n\n      <ToastContainer autoClose={5000} theme=\"colored\" newestOnTop={true} />\n    </div>\n  );\n}\n\nexport default HomePage;\n"]},"metadata":{},"sourceType":"module"}